import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium

st.set_page_config(page_title="Milk Run Viewer", layout="wide")
st.title("Milk Run Viewer")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Milk Run - Daikin (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets)")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Google Sheet
@st.cache_data
def load_sheet(sheet_gid, name):
    url = f"https://docs.google.com/spreadsheets/d/1IQ2T_v2y9z3KCsZ6ul3qQtGBKgnx3s0OtwRaDIuuUSc/export?format=csv&gid={sheet_gid}"
    try:
        df = pd.read_csv(url)
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return df
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return pd.DataFrame()

# ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ó
vendors = load_sheet(0, "Vendors")
vehicles = load_sheet(1327265658, "Vehicles")
routes = load_sheet(498856514, "Routes")
pallet_by_day = load_sheet(593344550, "Vendor Pallet By Day")
frequency = load_sheet(1620015243, "Frequency")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.header("Vendors")
st.dataframe(vendors)

st.header("Vehicles")
st.dataframe(vehicles)

st.header("Routes")
st.dataframe(routes)

st.header("Pallets by Day")
st.dataframe(pallet_by_day)

st.header("Frequency")
st.dataframe(frequency)
# -----------------------
# üåç ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (Milk Run)
# -----------------------

st.subheader("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Milk Run")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏à‡∏≤‡∏Å Abbreviation
# ‡πÄ‡∏û‡∏¥‡πà‡∏° Daikin ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô vendor_coords ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
vendor_coords = {
    row["Ab."]: (row["lat"], row["lng"])
    for _, row in vendors.iterrows()
}

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î Daikin (‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠ DIT)
vendor_coords["DIT"] = (13.4214134, 101.0101508)

# ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏ñ
routes["date"] = pd.to_datetime(routes["date"])
selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=routes["date"].min())
selected_vehicle = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ñ", sorted(routes["vehicle_id"].unique()))

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏ñ
filtered = routes[
    (routes["date"] == pd.to_datetime(selected_date)) &
    (routes["vehicle_id"] == selected_vehicle)
].sort_values(["trip_no", "arrival_time"])

if filtered.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏£‡∏ñ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
else:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    first_vendor = filtered.iloc[0]["Ab."]
    map_center = vendor_coords.get(first_vendor, (13.7, 100.5))
    route_map = folium.Map(location=map_center, zoom_start=9)

    colors = ["red", "blue", "green", "orange", "purple", "darkred"]
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ trip
    for trip_no, group in filtered.groupby("trip_no"):
        coords = []
        for _, row in group.iterrows():
            abbr = row["Ab."]
            lat, lng = vendor_coords.get(abbr, (None, None))
            if lat and lng:
                coords.append((lat, lng))
                popup = f"{abbr}<br>{row['arrival_time']} - {row['departure_time']}"
                folium.Marker(location=(lat, lng), popup=popup,
                              icon=folium.Icon(color=colors[trip_no % len(colors)])).add_to(route_map)

        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô
        if len(coords) >= 2:
            folium.PolyLine(coords, color=colors[trip_no % len(colors)],
                            weight=3, opacity=0.8).add_to(route_map)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô Streamlit
    st_data = st_folium(route_map, width=800, height=500)
